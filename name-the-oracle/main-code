import simplegui
import random

frame = simplegui.create_frame("Oracle",600,400)

#Images

forest_character_bust = simplegui.load_image("https://media.discordapp.net/attachments/799029411185033257/816423654421954610/Untitled17_20210302134644.png?width=422&height=422")
forest_character_stand_walk = simplegui.load_image("https://media.discordapp.net/attachments/799029411185033257/816423708729540628/Untitled18_20210302163516.png?width=316&height=422")
forest_character_walk = simplegui.load_image("https://ekoren.github.io/name-the-oracle/thingy.png")
forest_background = simplegui.load_image("https://static.photocrowd.com/upl/3m/cms.Wl4JJNTjmGx8TN459Mbw-hd.jpeg")
plains_background = simplegui.load_image("https://ekoren.github.io/plains_background.jpeg")
plains_bust = simplegui.load_image("https://ekoren.github.io/plains_bust.png")
plains_move_left = simplegui.load_image("https://ekoren.github.io/plains_main_1.png")
plains_move_right = simplegui.load_image("https://ekoren.github.io/plains_main_2.png")
valley_background = simplegui.load_image("https://ekoren.github.io/name-the-oracle/cartoon-valley-vector-2519923.jpg")
valley_bust = simplegui.load_image("https://ekoren.github.io/name-the-oracle/Valley%20King%20(1).png")
valley_move_left = simplegui.load_image("https://ekoren.github.io/name-the-oracle/ValleyRunLeft.png")
valley_move_right = simplegui.load_image("https://ekoren.github.io/name-the-oracle/ValleyRunRight.png")
coast_bust = simplegui.load_image("https://ekoren.github.io/name-the-oracle/canvas%20(6).png")
coast_move_left = simplegui.load_image("https://ekoren.github.io/name-the-oracle/canvas__4_-removebg-preview.png")
coast_move_right = simplegui.load_image("https://ekoren.github.io/name-the-oracle/canvas__5_-removebg-preview.png")
coast_background = simplegui.load_image("https://ekoren.github.io/canvas%20(7).png")
mountain_bust = simplegui.load_image("https://ekoren.github.io/name-the-oracle/canvas__1_-removebg-preview.png")
mountain_move_left = simplegui.load_image("https://ekoren.github.io/name-the-oracle/canvas__2_-removebg-preview.png")
mountain_move_right = simplegui.load_image("https://ekoren.github.io/name-the-oracle/canvas__2_-removebg-preview.png")
mountain_background = simplegui.load_image("https://ekoren.github.io/name-the-oracle/canvas%20(1).png")
keeper_front = simplegui.load_image("https://ekoren.github.io/name-the-oracle/canvas%20(2).png")
keeper_walking_1 = simplegui.load_image("https://ekoren.github.io/name-the-oracle/canvas%20(1)%20(1).png")
keeper_walking_2 = simplegui.load_image("https://ekoren.github.io/name-the-oracle/canvas%20(3).png")
forest_images = [forest_character_stand_walk,forest_character_walk,forest_character_bust]
plains_images = [plains_move_left, plains_move_right, plains_bust]
valley_images = [valley_move_left, valley_move_right, valley_bust]
coast_images = [coast_move_left, coast_move_right, coast_bust]
mountain_images = [mountain_move_left, mountain_move_right, mountain_bust]
keeper_images = [keeper_walking_1,keeper_walking_2,keeper_front]

Balloon = simplegui.load_image("https://17Captain.github.io/81J1ZB-n6mL._AC_SX679_-removebg-preview.png")
Overworld = simplegui.load_image("https://17Captain.github.io/map (1).png")

class Box:
    def __init__(self):
        self.map_width = Overworld.get_width()
        self.map_height = Overworld.get_height()
        self.balloon_width = Balloon.get_width()
        self.balloon_height = Balloon.get_height()
        self.x = 300
        self.y = 200
        self.direction = [0,0]
        self.pos = [self.x,self.y]
        self.up = False
        self.down = False
        self.left = False
        self.right = False
        self.map = True
        
    def map_draw(self,canvas):
        Map.move()
        canvas.draw_image(Overworld,[self.map_width/2,self.map_height/2],[self.map_width,self.map_height],(300,200),(600,400))
        canvas.draw_image(Balloon,[self.balloon_width/2,self.balloon_height/2],[self.balloon_width,self.balloon_height],(self.x,self.y),(30,20))
        
    def move(self):
        if self.up == True:
            self.direction[1] = -2
        elif self.down == True:
            self.direction[1] = 2
        else:
            self.direction[1] = 0
            
        if self.left == True:
            self.direction[0] = -2
        elif self.right == True:
            self.direction[0] = 2
        else:
            self.direction[0] = 0
            
        if self.x < 10:
            self.x = 590
        if self.x > 590:
            self.x = 10
        if self.y < 10:
            self.y = 390
        if self.y > 390:
            self.y = 10
        
        self.x += self.direction[0]
        self.y += self.direction[1]
        
        if self.x >= 120 and self.x <= 220:
            if self.y >= 10 and self.y <= 210:
                Welcome.coast_welcome()
                self.map = False
                self.x = 300
                self.y = 200
                self.up = False
                self.down = False
                self.left = False
                self.right = False
                
        if self.x >= 210 and self.x <= 390:
            if self.y >= 300 and self.y <= 380:
                Welcome.plains_welcome()
                self.map = False
                self.x = 300
                self.y = 200
                self.up = False
                self.down = False
                self.left = False
                self.right = False
                
        if self.x >= 420 and self.x <= 600:
            if self.y >= 240 and self.y <= 380:
                Welcome.forest_welcome()
                self.map = False
                self.x = 300
                self.y = 200
                self.up = False
                self.down = False
                self.left = False
                self.right = False
                  
        if self.x >= 450 and self.x <= 580:
            if self.y >= 50 and self.y <= 100:
                Welcome.valley_welcome()
                self.map = False
                self.x = 300
                self.y = 200
                self.up = False
                self.down = False
                self.left = False
                self.right = False
                
        if self.x >= 300 and self.x <= 400:
            if self.y >= 50 and self.y <= 75:
                Welcome.mountain_welcome()
                self.map = False
                self.x = 300
                self.y = 200
                self.up = False
                self.down = False
                self.left = False
                self.right = False
                
        self.pos = [self.x,self.y]
        
    def change_location(self):
        self.map = True
        Guy1.meeting_villager = False
        population()

def draw_text(canvas, text, x, y, desired_width, font_size, color) :
    split = [] #Initializes empty list
    cx = (desired_width * font_size) / 4 #Calculates the offset to the center
   
    line = "" #Initializes an empty string
    for i in range(len(text)) : #Loops over every character in the text
        if (text[i] == "\n") or ((text[i] == " ") and (len(line) >= desired_width)) : #Check if it should go to the next line
            split.append(line) #Add everything in the line to the list of lines
            line = "" #Reset the line
        else :
            line += text[i] #Add to the line any normal characters
       
    split.append(line) #Add the last line to the list
   
    for i in range(len(split)) : #Loop over each line
        canvas.draw_text(split[i], [x - cx, y + i * font_size], font_size, color) #Draw each line of text under, going down a step each time

# Handler to draw on canvas
class welcome:
    
    def __init__(self):
        self.welcome = False
        self.welcome_timer = 840
        self.speed = 5
        self.region = ''
        self.image = forest_background
        self.imageWidth = self.image.get_width()
        self.imageHeight = self.image.get_height()
        self.villager_type = forest_character_bust
        self.messages = ["","","","","","","",""]
        
    def skip_intro(self):
        self.welcome_timer = 0
        self.welcome = False
       
    def main_welcome(self):
        self.welcome = True
        self.welcome_timer = 840
        self.speed = 5
        self.image = Overworld
        self.villager_type = forest_character_bust
        self.region = 'forest'
        Guy1.villager_location = "Forest"

        message1 = "Welcome to the search for the oracle"
        message2 = "you must find him"
        message3 = "it is your lifelong duty"
        message4 = "do not fail for destruction ensues"
        message5 = "As the Keeper you must seek out"
        message6 = "the oracle and therefore save everyone"
        message7 = "Good Luck!"
        self.messages = [message1, message2, message3, message4, message5, message6, message7]

  

    def forest_welcome(self):
        self.welcome = True
        self.welcome_timer = 840
        self.speed = 5
        self.image = forest_background
        self.villager_type = forest_character_bust
        self.region = 'forest'
        Guy1.villager_location = "Forest"

        message1 = "Welcome to the forest"
        message2 = "you are stranded here"
        message3 = "the trees are tall"
        message4 = "the fog is thick"
        message5 = "you cant see far"
        message6 = "try and find a way out"
        message7 = "Good Luck!"
        self.messages = [message1, message2, message3, message4, message5, message6, message7]

        # Handler to draw on canvas
    def welcome_draw(self,canvas):
        self.imageWidth = self.image.get_width()
        self.imageHeight = self.image.get_height()

        if self.welcome == True:
            self.welcome_timer -= 1
            i = int(self.welcome_timer/120)%len(self.messages)
            canvas.draw_image(self.image, [self.imageWidth/2, self.imageHeight/2], [self.imageWidth, self.imageHeight], [300, 200], [600, 400])
            canvas.draw_text(self.messages[6-i], [200,200], 26, "Red")
        if self.welcome_timer <= 0:
            self.welcome = False
                
    def mountain_welcome(self):
        self.welcome = True
        self.welcome_timer = 840
        self.speed = 5
        self.image = mountain_background
        self.villager_type = mountain_bust
        self.region = 'mountain'
        Guy1.villager_location = "Mountains"

        message1 = "Try to climb down the mountain "
        message2 = "Find the Mineshaft "
        message3 = "Or jump "
        message4 = " Good luck "
        message5 = " Welcome to Clawtooth mountain "
        message6 = " You are deserted here "
        message7 = " Collect information from strangers "
        self.messages = [message1, message2, message3, message4, message5, message6, message7]
        
    def plains_welcome(self):
        self.welcome = True
        self.welcome_timer = 840
        self.speed = 5
        self.image = plains_background
        self.villager_type = plains_bust
        self.region = 'plains'
        Guy1.villager_location = "Plains"
        
        message1 = "Welcome to the Plains"
        message2 = "Bison are all around you"
        message3 = "Be careful, don't anger them"
        message4 = "Find your way through the Bison herd"
        message5 = "Speak with strangers"
        message6 = "Collect valuable information"
        message7 = "Learn more about the Oracle"
        self.messages = [message1, message2, message3, message4, message5, message6, message7]
        
    def valley_welcome(self):
        self.welcome = True
        self.welcome_timer = 840
        self.speed = 5
        self.image = valley_background
        self.villager_type = valley_bust
        self.region = 'valley'
        Guy1.villager_location = "Valley"
        
        message1 = "Welcome to the Valley"
        message2 = "Find your way out before it floods"
        message3 = "The flood is due soon"
        message4 = "Talk to strangers"
        message5 = "The Oracle may be here"
        message6 = "Collect info on the Oracle"
        message7 = "Avoid the flood"
        self.messages = [message1, message2, message3, message4, message5, message6, message7]
        
    def coast_welcome(self):
        self.welcome = True
        self.welcome_timer = 840
        self.speed = 5
        self.image = coast_background
        self.villager_type = coast_bust
        self.region = 'coast'
        Guy1.villager_location = "Coast"
        
        message1 = "Welcome to the Coast"
        message2 = "The fish speak to you"
        message3 = "They may know about the Oracle"
        message4 = "Sharks loom in the water"
        message5 = "Be careful fishing"
        message6 = "Learn about the Oracle"
        message7 = "Fish will not help you"
        self.messages = [message1, message2, message3, message4, message5, message6, message7]

class Villager:
    
    def __init__(self):
        self.regions = ['forest', 'valley', 'coast', 'plains','mountain']
        self.region_images = [forest_images, valley_images, coast_images, plains_images, mountain_images]
        for i in range(len(self.regions)):
            if Welcome.region == self.regions[i]:
                self.images = self.region_images[i]
                       
        self.x = random.randint(5, 395)
        self.y = random.randint(5, 295)
        self.dir_x = 0
        self.dir_y = 0
        self.dir_timer = 0
        self.speed = .2
        self.draw_timer = 0
        self.image_list_index = 0
        self.Villagers = []
        self.pos = [self.x,self.y]
                               
    def move(self):
        self.dir_timer += 1
        self.dir_timer = self.dir_timer%20
        if self.dir_timer == 0:
            self.dir_x = random.randint(-10, 10)
            self.dir_y = random.randint(-10, 10)
                       
        self.x += self.speed*self.dir_x
        self.y += self.speed*self.dir_y
        
        if self.x < 5:
            self.x = 595
        if self.x > 595:
            self.x = 5
                
        if self.y > 395:
            self.y = 5
        if self.y < 5:
            self.y = 395

        self.pos = [self.x,self.y]
            
    def villager_draw(self, canvas):
        for i in range(len(self.regions)):
            if Welcome.region == self.regions[i]:
                self.images = self.region_images[i]
        self.draw_timer += 1
        self.draw_timer = self.draw_timer%10
        if self.draw_timer == 0:
            self.image_list_index += 1
            self.image_list_index = self.image_list_index%2
                       
        self.image = self.images[self.image_list_index]
        w = self.image.get_width()
        h = self.image.get_height()
        canvas.draw_image(self.image, (w/2, h/2), (w, h), (self.x, self.y), (100, 80))
        self.move()
            
def population():
    villagers.Villagers = []
    for i in range(random.randint(3,6)):
        v = Villager()
        villagers.Villagers.append(v)
            
#Magpie

ask_food_directly = ['food', 'foods', 'eat', 'eats', 'hungry', 'meal', 'meals', 'consume', 'taste', 'tasty']
ask_food_indirectly = ['goat meat', 'fish', 'cheese', 'papaya', 'papayas', 'potato', 'potatoes']

ask_location_directly = ['live', 'location', 'region', 'reside', 'house', 'home', 'where']  
ask_location_indirectly = ['plain', 'plains', 'valley', 'forest', 'forests', 'woods', 'mountain', 'mountains', 'coast', 'coastline', 'ocean', 'sea']

ask_age_directly = ['old', 'age', 'young', 'years', 'long', 'born'] 
ask_age_indirectly = ['17', '36', '43', '59', '75', '107', 'seventeen', 'thirty-six', 'forty-three',  'fifty-nine', 'seventy-five', 'one hundred seven']  

ask_job_directly = ['work', 'job', 'occupation', 'money', 'a living']
ask_job_indirectly = ['bard', 'fisherman', 'scribe', 'writer', 'warrior', 'carpenter', 'noble', 'fishing']

ask_hobby_directly = ['hobby', 'activity', 'fun', 'pastime']
ask_hobby_indirectly = ['contemplate', 'watch', 'hunt', 'games', 'play', 'walk', 'children', 'animals', 'birds', 'shore', 'meaning']

ask_orgin_directly =  [ 'origin', 'tribe']
ask_orgin_indirectly = ['earth', 'water', 'fire', 'air']

ask_travel_directly = ['travel', 'move', 'navigate', 'vehicle', 'ride', 'transportation', 'transport','get around']
ask_travel_indirectly =['camel', 'donkey', 'boat', 'horseback', 'walking', 'walk', 'horse']

ask_trait_directly = ['trait','manner','habit','character','attributes']
ask_trait_indirectly = ["Helpful","Nice","Sarcastic","Generous","Demanding","Greedy","Ungrateful"]


#Attributes Lists

locations = ["Coast","Forest","Mountains","Valley","Plains"]
occupations = ["Fisherman","Hunter","Nobel","Warrior","Farmer","Guard","Scribe","Bard","Carpenter"]
foods = ["Goat Meat","Steak","Rice","Berries","Fish","Bread","Potatoes","Cheese"]
travels = ["Horseback","Walking","Wagon","Donkey","Camel","Boat"]
orgins = ["Earth","Air","Water","Fire"]
hobbies = ["Walking along the river","Teaching the kids","Protecting the crops","Contemplate the meaning of life","Hunt large animals","Walk by the shore","Watch the birds"]
traits = ["Helpful","Nice","Sarcastic","Generous","Demanding","Greedy","Ungrateful"]
first_names = ["Aldus","Daw","Col","Amis","Bate","Dicun","Elis","Elric","Firmin","Hamo","Hankin","Hann","Herry","Jackin","Judd","Nichol","Noll","Stace"]							
last_names = ["Ashdown","Baker","Bennett","Biggie","Clarke","Mannering","Walter","Webb","Payne","Ward","Taylor","Hughes","Godfrey","Nash","Rolfe","Cooper"]

Oracles = ["nate trier","katrina woodsworth","boomy","buster","draginthese","gm soneus badaches","jim jam","jared","geoffe","geoff baysos","duffy goldifold"]
Oracle_Locations = ["Mountains","Mountains","Mountains","Coast","Valley","Plains","Forest","Coast","Forest","Mountains","Coast"]
Oracle_Occupations = ["Nobel","Fisherman","Warrior","Carpenter","Warrior","Bard","Warrior","Bard","Bard","Fisherman","Fisherman"]
Oracle_Foods = ["Fish","Cheese","Cheese","Goat Meat","Cheese","Fish","Fish","Cheese","Cheese","Goat Meat","Goat Meat"]
Oracle_Travels = ["Walking","Walking","Donkey","Wagon","Horseback","Horseback","Walking","Walking","Donkey","Boat","Boat"]
Oracle_Ages = [17,17,75,43,17,17,75,43,36,75,17]
Oracle_Orgins = ["Water","Fire","Earth","Earth","Fire","Fire","Earth","Earth","Fire","Fire","Air"]

class Profile:
    
    def __init__(self):
        self.villager_location = random.choice(locations)
        self.win = False
        self.is_asked = False
        self.up = False
        self.down = False
        self.left = False
        self.right = False
        self.direction = [0,0]
        self.x = 595
        self.y = 200
        self.asked_question = ""
        self.question_typing = ""
        self.occupation = ""
        self.food = ""
        self.travel = ""
        self.age = ""
        self.orgin = ""
        self.hobby = ""
        self.trait = ""
        self.name = ""
        self.attributes = []
        self.oracle_attributes = []
        self.known_attributes = ["Location: ?","Name: ?","Occupation: ?","Food: ?","Travel: ?","Age: ?","Orgin: ?","Hobby: ?","Trait: ?"]
        self.display_known = False
        self.same_traits = 0
        self.attributes_text = []
        self.meeting_villager = False
        self.draw_timer = 0
        self.image_list_index = 0
        
    def is_win(self):
        self.hello_text = "Who's the Oracle?"
        self.question = "Answer in the ask question box"
        self.response = "Hint: no capitols"
        
        if self.asked_question == self.attributes_text[1]:
            self.win = True
        else:
            self.win = False
        
    def new_attributes(self):
        x = []
        self.same_traits = 0
        self.attributes = []
        self.attributes.append("Location: "+str(self.villager_location))
        self.first_name = random.choice(first_names)
        self.last_name = random.choice(last_names)
        self.name = str(self.first_name)+" "+str(self.last_name)
        self.attributes.append("Name: "+str(self.name))
        self.occupation = random.choice(occupations)
        self.attributes.append("Occupation: "+str(self.occupation))
        self.food = random.choice(foods)
        self.attributes.append("Food: "+str(self.food))
        self.travel = random.choice(travels)
        self.attributes.append("Travel: "+str(self.travel))
        self.age = random.randint(15,103)
        self.attributes.append("Age: "+str(self.age)+" years old")
        self.orgin = random.choice(orgins)
        self.attributes.append("Orgin: "+str(self.orgin))
        self.hobby = random.choice(hobbies)
        self.attributes.append("Hobby: "+str(self.hobby))
        self.trait = random.choice(traits)
        self.attributes.append("Trait: "+str(self.trait))
        for i in range(len(self.attributes)):
            if self.attributes[i] == self.oracle_attributes[i]:
                self.same_traits += 1
                    
        self.ask()
        
    def oracle_attribute(self):
        self.oracle_attributes = []
        self.attributes_text = []
        self.name = random.choice(Oracles)
        for i in range(len(Oracles)):
            if self.name == Oracles[i]:
                self.location = Oracle_Locations[i]
                self.oracle_attributes.append("Location: "+str(self.location))
                self.attributes_text.append(self.location)
                self.oracle_attributes.append("Name: "+str(self.name))
                self.attributes_text.append(self.name)
                self.occupation = Oracle_Occupations[i]
                self.oracle_attributes.append("Occupation: "+str(self.occupation))
                self.attributes_text.append(self.occupation)
                self.food = Oracle_Foods[i]
                self.oracle_attributes.append("Food: "+str(self.food))
                self.attributes_text.append(self.food)
                self.travel = Oracle_Travels[i]
                self.oracle_attributes.append("Travel: "+str(self.travel))
                self.attributes_text.append(self.travel)
                self.age = Oracle_Ages[i]
                self.oracle_attributes.append("Age: "+str(self.age)+" years old")
                self.attributes_text.append(self.age)
                self.orgin = Oracle_Orgins[i]
                self.oracle_attributes.append("Orgin: "+str(self.orgin))
                self.attributes_text.append(self.orgin)
                self.hobby = random.choice(hobbies)
                self.oracle_attributes.append("Hobby: "+str(self.hobby))
                self.attributes_text.append(self.hobby) 
                self.trait = random.choice(traits)
                self.oracle_attributes.append("Trait: "+str(self.trait))
                self.attributes_text.append(self.trait)
                
    def meet_villager(self):
        self.meeting_villager = False
        for Villager in villagers.Villagers:
            if dist(self.pos,Villager.pos) < 5:
                self.meeting_villager = True
                self.up = False
                self.down = False
                self.left = False
                self.right - False
                self.x = 595
                self.y = 200
                self.new_attributes()
                population()
            
        
    def known_attribute(self):
        if self.display_known == True:
            self.display_known = False
        elif self.display_known == False:
            self.display_known = True
            
    def player_draw(self,canvas):
        self.draw_timer += 1
        self.draw_timer = self.draw_timer%10
        if self.draw_timer == 0:
            self.image_list_index += 1
            self.image_list_index = self.image_list_index%2
                       
        self.image = keeper_images[self.image_list_index]
        w = self.image.get_width()
        h = self.image.get_height()
        
        if self.up == True:
            self.direction[1] = -3
        elif self.down == True:
            self.direction[1] = 3
        else:
            self.direction[1] = 0
        
        if self.left == True:
            self.direction[0] = -3
        elif self.right == True:
            self.direction[0] = 3
        else:
            self.direction[0] = 0
        
        if self.x < 5:
            self.x = 595
        if self.x > 595:
            self.x = 5
        if self.y < 5:
            self.y = 395
        if self.y > 395:
            self.y = 5
            
        self.x += self.direction[0]
        self.y += self.direction[1]
                    
        self.pos = [self.x,self.y]
        self.meet_villager()
                        
        canvas.draw_image(self.image, (w/2, h/2), (w, h), (self.x, self.y), (100, 80))

        
    def ask(self):
        self.hellos = ["Villager: Hello Traveler","Villager: Welcome to the "+str(self.villager_location)]
        self.hello_text = random.choice(self.hellos)
        self.question = "You: Do you know the Oracle?"
        if self.same_traits >= 2:
            self.response = "Villager: Yeah, I know the Oracle."
        elif self.same_traits < 2:
            self.response = "Villager: No, I don't know who that is."
            
    def ask_question(self):
        if self.same_traits >= 2:
            self.response = random.choice(["Villager: Can you repeat that?", "Villager: You sound really dumb right now.", "Villager: I don't want to answer that.", "Villager: Shhhhh... They'll hear.", "Villager: Shut up and go away.", "Villager: Be gone!", "Villager: Let's change the subject...", "Villager: Enough about this silly oracle", "Villager: Kiss me...", "Villager: ...", "Villager: Shut it nerd! *dabs*"])
            
            for i in range(len(ask_food_directly)):
                if ask_food_directly[i] in self.asked_question:	
                    if self.attributes[3] == self.oracle_attributes[3]:
                        self.response = "Villager: He eats "+str(self.attributes_text[3]+".")
                        self.known_attributes[3] = self.oracle_attributes[3]
                    else:
                        self.response = "Villager: I don't know what he eats."
                    
            for i in range(len(ask_food_indirectly)):
                if ask_food_indirectly[i] in self.asked_question:	
                    if self.attributes[3] == self.oracle_attributes[3]:
                        self.response = "Villager: He eats "+str(self.attributes_text[3]+".")
                        self.known_attributes[3] = self.oracle_attributes[3]
                    else:
                        self.response = "Villager: I don't know what he eats."
                    
            for i in range(len(ask_location_directly)):
                if ask_location_directly[i] in self.asked_question:
                    self.response = "Villager: He's at the "+str(self.attributes_text[0]+".")
                    self.known_attributes[0] = self.oracle_attributes[0]
            for i in range(len(ask_location_indirectly)):
                if ask_location_indirectly[i] in self.asked_question:
                    self.response = "Villager: He's at the "+str(self.attributes_text[0]+".")
                    self.known_attributes[0] = self.oracle_attributes[0]
                    
            for i in range(len(ask_age_directly)):
                if ask_age_directly[i] in self.asked_question:
                    self.response = "Villager: He's "+str(self.attributes_text[5])+" years old."
                    self.known_attributes[5] = self.oracle_attributes[5]
            for i in range(len(ask_age_indirectly)):
                if ask_age_indirectly[i] in self.asked_question:
                    self.response = "Villager: He's "+str(self.attributes_text[5])+" years old."
                    self.known_attributes[5] = self.oracle_attributes[5]
                    
            for i in range(len(ask_job_directly)):
                if ask_job_directly[i] in self.asked_question:
                    if self.attributes[2] == self.oracle_attributes[2]:
                        self.response = "Villager: He is a "+str(self.attributes_text[2]+".")
                        self.known_attributes[2] = self.oracle_attributes[2]
                    else:
                        self.response = "Villager: I don't know where he works."
                    
            for i in range(len(ask_job_indirectly)):
                if ask_job_indirectly[i] in self.asked_question:	
                    if self.attributes[2] == self.oracle_attributes[2]:
                        self.response = "Villager: He is a "+str(self.attributes_text[2]+".")
                        self.known_attributes[2] = self.oracle_attributes[2]
                    else:
                        self.response = "Villager: I don't know where he works."
                   
            for i in range(len(ask_hobby_directly)):
                if ask_hobby_directly[i] in self.asked_question:	
                    if self.attributes[7] == self.oracle_attributes[7]:
                        self.response = "Villager: He likes to "+str(self.attributes_text[7]+".")
                        self.known_attributes[7] = self.oracle_attributes[7]
                    else:
                        self.response = "Villager: I don't know what he does for fun."
                    
            for i in range(len(ask_hobby_indirectly)):
                if ask_hobby_indirectly[i] in self.asked_question:
                    if self.attributes[7] == self.oracle_attributes[7]:
                        self.response = "Villager: He likes to "+str(self.attributes_text[7]+".")
                        self.known_attributes[7] = self.oracle_attributes[7]
                    else:
                        self.response = "Villager: I don't know what he does for fun."
                   
            for i in range(len(ask_orgin_directly)):
                if ask_orgin_directly[i] in self.asked_question:	
                    if self.attributes[6] == self.oracle_attributes[6]:
                        self.response = "Villager: He's from the "+str(self.attributes_text[6]+".")
                        self.known_attributes[6] = self.oracle_attributes[6]
                    else:
                        self.response = "Villager: I don't know where he's from."
                    
            for i in range(len(ask_orgin_indirectly)):
                if ask_orgin_indirectly[i] in self.asked_question:	
                    if self.attributes[6] == self.oracle_attributes[6]:
                        self.response = "Villager: He's from the "+str(self.attributes_text[6]+".")
                        self.known_attributes[6] = self.oracle_attributes[6]
                    else:
                        self.response = "Villager: I don't know where he's from."
                   
            for i in range(len(ask_travel_directly)):
                if ask_travel_directly[i] in self.asked_question:
                    if self.attributes[4] == self.oracle_attributes[4]:                    
                        self.response = "Villager: He travels by "+str(self.attributes_text[4]+".")
                        self.known_attributes[4] = self.oracle_attributes[4]
                    else:
                        self.response = "Villager: I don't know how he gets around."
                    
            for i in range(len(ask_travel_indirectly)):
                if ask_travel_indirectly[i] in self.asked_question:
                    if self.attributes[4] == self.oracle_attributes[4]:
                        self.response = "Villager: He travels by "+str(self.attributes_text[4]+".")
                        self.known_attributes[4] = self.oracle_attributes[4]
                    else:
                        self.response = "Villager: I don't know how he gets around."
                   
            for i in range(len(ask_trait_directly)):
                if ask_trait_directly[i] in self.asked_question:
                    if self.attributes[8] == self.oracle_attributes[8]:
                        self.response = "Villager: He is "+str(self.attributes_text[8]+".")
                        self.known_attributes[8] = self.oracle_attributes[8] 
                    else:
                        self.response = "Villager: I don't know what he's like."
                    
            for i in range(len(ask_trait_indirectly)):
                if ask_trait_indirectly[i] in self.asked_question:	
                    if self.attributes[8] == self.oracle_attributes[8]:
                        self.response = "Villager: He is "+str(self.attributes_text[8]+".")
                        self.known_attributes[8] = self.oracle_attributes[8]
                    else:
                        self.response = "Villager: I don't know what he's like"
                   
        else:
            self.response = "Villager: I don't know him."

    
    
Map = Box()      
Guy1 = Profile()
Guy1.oracle_attribute()
Guy1.new_attributes()
Welcome = welcome()
villagers = Villager()
population()
Welcome.main_welcome()


def profile_draw(canvas):
    canvas.draw_polygon([(5,395),(350,395),(350,205),(5,205)],10,"Orange","White")
    text_box = "Dialogue Box"
    text_y = 224
    canvas.draw_text(text_box,[12,text_y],18,"Black")
    canvas.draw_image(Welcome.image,(Welcome.image.get_width()/2,Welcome.image.get_height()/2),(Welcome.image.get_width(),Welcome.image.get_height()),(475,200),(240,400))
    canvas.draw_image(Welcome.villager_type,(Welcome.villager_type.get_width()/2,Welcome.villager_type.get_height()/2),(Welcome.villager_type.get_width(),Welcome.villager_type.get_height()),(475,200),(240,400))

    
    if Guy1.display_known == False:
        canvas.draw_polygon([(5,195),(350,195),(350,5),(5,5)],10,"Cyan","White")
        text_y = 24
        villager_text = "Villager Attributes"
        canvas.draw_text(villager_text,[12,text_y],18,"Black")
        text_y += 18
        for i in range(len(Guy1.attributes)):
            canvas.draw_text(Guy1.attributes[i],[12,text_y],18,"Black")
            text_y += 18
    if Guy1.display_known == True:
        canvas.draw_polygon([(5,195),(350,195),(350,5),(5,5)],10,"Red","White")
        text_y = 24
        known_text = "Known Oracle Attributes"
        canvas.draw_text(known_text,[12,text_y],18,"Black")
        text_y += 18
        for i in range(len(Guy1.known_attributes)):
            canvas.draw_text(Guy1.known_attributes[i],[12,text_y],18,"Black")
            text_y += 18

def keydown_handler(key):
    if key == simplegui.KEY_MAP['1']:
        Guy1.question_typing += '1'
    elif key == simplegui.KEY_MAP['2']:
        Guy1.question_typing += '2'
    elif key == simplegui.KEY_MAP['3']:
        Guy1.question_typing += '3'
    elif key == simplegui.KEY_MAP['4']:
        Guy1.question_typing += '4'
    elif key == simplegui.KEY_MAP['5']:
        Guy1.question_typing += '5'
    elif key == simplegui.KEY_MAP['6']:
        Guy1.question_typing += '6'
    elif key == simplegui.KEY_MAP['7']:
        Guy1.question_typing += '7'
    elif key == simplegui.KEY_MAP['8']:
        Guy1.question_typing += '8'
    elif key == simplegui.KEY_MAP['9']:
        Guy1.question_typing += '9'
    elif key == simplegui.KEY_MAP['a']:
        Guy1.question_typing += 'a'
    elif key == simplegui.KEY_MAP['b']:
        Guy1.question_typing += 'b'
    elif key == simplegui.KEY_MAP['c']:
        Guy1.question_typing += 'c'
    elif key == simplegui.KEY_MAP['d']:
        Guy1.question_typing += 'd'
    elif key == simplegui.KEY_MAP['e']:
        Guy1.question_typing += 'e'
    elif key == simplegui.KEY_MAP['f']:
        Guy1.question_typing += 'f'
    elif key == simplegui.KEY_MAP['g']:
        Guy1.question_typing += 'g'
    elif key == simplegui.KEY_MAP['h']:
        Guy1.question_typing += 'h'
    elif key == simplegui.KEY_MAP['i']:
        Guy1.question_typing += 'i'
    elif key == simplegui.KEY_MAP['j']:
        Guy1.question_typing += 'j'
    elif key == simplegui.KEY_MAP['k']:
        Guy1.question_typing += 'k'
    elif key == simplegui.KEY_MAP['l']:
        Guy1.question_typing += 'l'
    elif key == simplegui.KEY_MAP['m']:
        Guy1.question_typing += 'm'
    elif key == simplegui.KEY_MAP['n']:
        Guy1.question_typing += 'n'
    elif key == simplegui.KEY_MAP['o']:
        Guy1.question_typing += 'o'
    elif key == simplegui.KEY_MAP['p']:
        Guy1.question_typing += 'p'
    elif key == simplegui.KEY_MAP['q']:
        Guy1.question_typing += 'q'
    elif key == simplegui.KEY_MAP['r']:
        Guy1.question_typing += 'r'
    elif key == simplegui.KEY_MAP['s']:
        Guy1.question_typing += 's'
    elif key == simplegui.KEY_MAP['t']:
        Guy1.question_typing += 't'
    elif key == simplegui.KEY_MAP['u']:
        Guy1.question_typing += 'u'
    elif key == simplegui.KEY_MAP['v']:
        Guy1.question_typing += 'v'
    elif key == simplegui.KEY_MAP['w']:
        Guy1.question_typing += 'w'
    elif key == simplegui.KEY_MAP['x']:
        Guy1.question_typing += 'x'
    elif key == simplegui.KEY_MAP['y']:
        Guy1.question_typing += 'y'
    elif key == simplegui.KEY_MAP['z']:
        Guy1.question_typing += 'z'
    elif key == simplegui.KEY_MAP['space']:
        Guy1.question_typing += ' '
    elif key == simplegui.KEY_MAP['0']:
        Guy1.asked_question = Guy1.question_typing
        Guy1.question = "You: "+str(Guy1.question_typing)+"?"
        Guy1.question_typing = ""
        Guy1.ask_question()
    
    if Guy1.meeting_villager == False and Map.map == False:
        if key == simplegui.KEY_MAP['up']:
            Guy1.up = True
        if key == simplegui.KEY_MAP['down']:
            Guy1.down = True
        if key == simplegui.KEY_MAP['left']:
            Guy1.left = True
        if key == simplegui.KEY_MAP['right']:
            Guy1.right = True
    if Map.map == True:
        if key == simplegui.KEY_MAP['up']:
            Map.up = True
        if key == simplegui.KEY_MAP['down']:
            Map.down = True
        if key == simplegui.KEY_MAP['left']:
            Map.left = True
        if key == simplegui.KEY_MAP['right']:
            Map.right = True
            
def keyup_handler(key):
    if Guy1.meeting_villager == False and Map.map == False:
        if key == simplegui.KEY_MAP['up']:
            Guy1.up = False
        if key == simplegui.KEY_MAP['down']:
            Guy1.down = False
        if key == simplegui.KEY_MAP['left']:
            Guy1.left = False
        if key == simplegui.KEY_MAP['right']:
            Guy1.right = False
    if Map.map == True:
        if key == simplegui.KEY_MAP['up']:
            Map.up = False
        if key == simplegui.KEY_MAP['down']:
            Map.down = False
        if key == simplegui.KEY_MAP['left']:
            Map.left = False
        if key == simplegui.KEY_MAP['right']:
            Map.right = False
            
def text_draw(canvas):
    hint = "Hint: Press ZERO to ask a question"
    typing_area = "Typing will appear here:"
    canvas.draw_text(hint,[12,224+18],18,"Black")
    canvas.draw_text(Guy1.hello_text,[12,224+18*2],18,"Black")
    canvas.draw_text(Guy1.question,[12,(224+18*3)],18,"Black")
    canvas.draw_text(typing_area,[12,(224+18*8)],18,"Black")
    canvas.draw_text(Guy1.question_typing,[12,(224+18*9)],18,"Black")
    canvas.draw_text(Guy1.response,[12,(224+18*4)],18,"Black")
    
print(Guy1.oracle_attributes)
    
def draw(canvas):
    if Guy1.meeting_villager == True and Map.map == False:
        profile_draw(canvas)
        text_draw(canvas)
        Guy1.up = False
        Guy1.down = False
        Guy1.right = False
        Guy1.left = False
    elif Guy1.meeting_villager == False and Map.map == False:
        canvas.draw_image(Welcome.image, [Welcome.imageWidth/2, Welcome.imageHeight/2], [Welcome.imageWidth, Welcome.imageHeight], [300, 200], [600, 400])
        Guy1.player_draw(canvas)
        for Villager in villagers.Villagers:
            Villager.villager_draw(canvas)
    if Map.map == True:
        Map.map_draw(canvas)
    Welcome.welcome_draw(canvas)

def dist(point1,point2):
    distance = ((point2[0] - point1[0])**2 + (point2[1] - point1[1])**2)**0.5
    return distance

frame.set_draw_handler(draw)
frame.set_keydown_handler(keydown_handler)
frame.set_keyup_handler(keyup_handler)
frame.add_button("Guess the oracle",Guy1.is_win)
frame.add_button("Skip Intro",Welcome.skip_intro)
frame.add_button("Meet new Villager",Guy1.meet_villager)
frame.add_button("Change Location",Map.change_location)
frame.add_button("Known Oracle Attributes",Guy1.known_attribute)
if Guy1.win == False:
    frame.start()
